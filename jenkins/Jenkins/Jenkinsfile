pipeline {
    agent any

    environment {
        EMAIL = 'kaloqniliev20004@gmail.com'
        ARTIFACT_NAME = '${env.BUILD_TAG}.tar.gz'
        APP_NAME = 'py-app'
        REPO_NAME = 'jfog-repo'
        DOCKER_REPO = 'kaloqniliev/myrepo:python02'
        SONAR_SCANNER_VERSION = '5.0.1'
    }

    options {
        skipDefaultCheckout()
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the source control management (SCM) system
                checkout scm
            }
        }

        stage('Test') {
            steps {
                script {
                    // Install necessary Python packages and run tests
                    sh '''
                    apt-get update && apt-get install -y python3-pip
                    if [ $? -ne 0 ]; then
                        echo 'Installation failed'
                        exit 1
                    fi
                    pip3 install pytest flask py-cpuinfo psutil
                    if [ $? -ne 0 ]; then
                        echo 'Installation failed'
                        exit 1
                    fi
                    pip install --upgrade pip
                    if [ $? -ne 0 ]; then
                        echo 'Upgrade failed'
                        exit 1
                    fi
                    pytest ./src
                    if [ $? -ne 0 ]; then
                        echo 'Tests failed'
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    // Run SonarQube analysis
                    // Use the SONAR_SCANNER_VERSION environment variable for the SonarQube scanner version
                    sh '''
                    sonar-scanner-${SONAR_SCANNER_VERSION}-linux
                    -Dsonar.projectKey=my-project
                    -Dsonar.sources=.
                    -Dsonar.projectName=MyProject
                    -Dsonar.projectVersion=1.0
                    -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube analysis to complete and check quality gate status
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('JFrog') {
            steps {
                // Upload the artifact to the JFrog repository
                sh '''
                jfrog rt u ${ARTIFACT_NAME} ${REPO_NAME}
                if [ $? -ne 0 ]; then
                    echo 'Upload failed'
                    exit 1
                fi
                '''
            }
        }

         stage('Docker Build and Push') {
            steps {
                script {
                    // Build a Docker image and push it to the Docker repository
                    sh '''
                    docker build -t ${DOCKER_REPO}/${APP_NAME}:${env.BUILD_TAG} .
                    if [ $? -ne 0 ]; then
                        echo 'Docker build failed'
                        exit 1
                    fi
                    docker push ${DOCKER_REPO}/${APP_NAME}:${env.BUILD_TAG}
                    if [ $? -ne 0 ]; then
                        echo 'Docker push failed'
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('Start Container') {
            steps {
                // Start the Docker container
                sh '''
                docker run -d -p 5000:5000 ${DOCKER_REPO}/${APP_NAME}:${env.BUILD_TAG}
                if [ $? -ne 0 ]; then
                    echo 'Docker run failed'
                    exit 1
                fi
                '''
            }
        }
    }

  post {
        always {
            script {
                // Clean up Docker images
                sh "docker system prune -f"
            }
            // Send an email notification about the build status
            emailext (
                subject: "Jenkins Pipeline Status: ${currentBuild.currentResult}",
                body: """<p>Jenkins Pipeline Status: ${currentBuild.currentResult}</p>
                          <p>Check the console output at ${env.BUILD_URL} to view the results.</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to: EMAIL
            )
        }
    }
}